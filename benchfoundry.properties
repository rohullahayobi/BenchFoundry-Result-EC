# example of a BenchFoundry config file, needs to be placed on the BenchFoundry master machine only
# leading and tailing whitespaces as well as empty lines will be ignored
# comments lines should start with the # character
##################################################################################################
# Please, note: Incompatible combinations (e.g., for the two classes or oplist + trace) may result
# in a hard crash of BenchFoundry or unexpected behavior!
##################################################################################################

# location of the schema input file which should be a sequence of DDL statements
schemaFilename:tpcc/tpcc_schema

# location of the file containing all the queries used in the respective trace
oplistFilename:tpcc/tpcc_operation

# location of the file containing all parameters sets refered to in the trace files
paramFilename:tpcc/tpcc_param

# location of the file containing all parameters sets refered to in the trace files
# this file will often be empty but may be used to forward special instructions to db
# connectors, e.g., for sending the request to a specific database replica. Use
# custparamFilename:none
# if you want to run BenchFoundry without a custom parameter list
custparamFilename:none
#samples/tpcc_cparam

# location of the trace file which will preload the database with an initial data set
# this trace may contain to entries. Use
# preloadTraceFilename:none
# if you want to run BenchFoundry without a preload trace
preloadTraceFilename:tpcc/tpcc_load

# location of the trace file which will be used to warm up the SUT
# this file should typically not be empty but should for reasons of reproducibility only
# contain read requests as it will rarely be fully executed. Use
# warmupTraceFilename:none
# if you want to run BenchFoundry without a warmup trace
warmupTraceFilename:tpcc/tpcc_warm

# location of the trace file of the actual experiment
experimentTraceFilename:tpcc/tpcc_run

# location of the config file for the database connector
dbConnectorConfigFile:mariadb.properties

# directory where the output results shall be written to on all machines
resultDir:results

# factory class which will create a physical schema from the logical schema specified in the
# schema input file. For non-relational databases this may involve schema denormalization.
physicalSchemFactoryClass:de.tuberlin.ise.benchfoundry.physicalschema.factory.RelationalPhysicalSchemaFactory

# class which shall be used to connect to the SUT. Should correspond to the schema factory class above.
dbConnectorClass:de.tuberlin.ise.benchfoundry.connectors.impl.MariadbRelationalConnector

# BenchFoundry will issue a prepare command to the database connector before sending the execute command
# at the poin in time specified in the trace. This property specifies the duration between prepare and
# execute command. Choosing high values will result in large thread pool sizes, choosing low values may
# cause delayed execution of transactions depending on the complexity of preparing transactions and the
# number of transactions per business process.
transactionPrepareTimeInMs:1000

# BenchFoundry will submit process instances to a thread pool for execution prior to the specified timestamp from
# the trace. This is done to assert on-time execution of the process. Choosing small values may lead to delay,
# high values may lead to significantly increased thread pool sizes.
processScheduleAheadTimeInMs:500

# The file that contains information on all slave instances. Use
# slaveFile:none
# if the master shall be run as single node BenchFoundry instance
slaveFile:slaves.properties

# If this flag is set to true, then BenchFoundry will print a detailed error trace for each business process with an
# exception. If there are many exceptions, this may slow down the benchmark and cause scheduling delays.
doDetailledLoggingForExceptions:true
