# location of the schema input file which should be a sequence of DDL statements
schemaFilename:tpcc_schema
# location of the file containing all the queries used in the respective trace
oplistFilename:tpcc_operation
# location of the file containing all parameters sets refered to in the trace files
paramFilename:tpcc_param
# location of the file containing all parameters sets refered to in the trace files
custparamFilename:tpcc_cparam
# location of the trace file which will preload the database with an initial data set this trace may contain to entries
preloadTraceFilename:tpcc_load
# location of the trace file which will be used to warm up the SUT
warmupTraceFilename:tpcc_warm
# location of the trace file of the actual experiment
experimentTraceFilename:tpcc_run
# directory where the output results shall be written to on all machines
resultDir:results
# factory class which will create a physical schema from the logical schema specified in the schema input file.
physicalSchemFactoryClass:de.tuberlin.ise.benchmw.physicalschema.factory.RelationalPhysicalSchemaFactory
# class which shall be used to connect to the SUT.
dbConnectorClass:de.tuberlin.ise.benchmw.connectors.impl.MariadbRelationalConnector
# BenchMW will issue a prepare command to the database connector before sending the execute command at the poin in time specified in the trace.
transactionPrepareTimeInMs:1000
# BenchMW will submit process instances to a thread pool for execution prior to the specified timestamp from the trace.
processScheduleAheadTimeInMs:500
# The file that contains information on all slave instances. Use slaveFile:none if the master shall be run as single node BenchMW instance
slaveFile:none
# If this flag is set to true, then BenchMW will print a detailed error trace for each business process with an exception.
doDetailledLoggingForExceptions:false
